{
  "version": 3,
  "sources": ["../../../src/components/bs5/accordion/accordion.functions.js", "../../../src/main.js"],
  "sourcesContent": ["/**\r\n * Toggle all accordion elements\r\n *\r\n * @memberof module:Accordion\r\n *\r\n * @param  {Object}  event - The event that triggered this function.\r\n * @returns {void}\r\n */\r\nexport function accordionToggleAll(event) {\r\n  // stop event propagation\r\n  try {\r\n    window.event.cancelBubble = true;\r\n    event.stopPropagation();\r\n  } catch (error) {\r\n    //error message\r\n  }\r\n\r\n  let toggleAllButton = event.target;\r\n  // find the accordion wrapper\r\n  let wrapper = toggleAllButton.closest(\".accordion-group\");\r\n  // get all the accordion buttons\r\n  let accordionButtons = wrapper.querySelectorAll(\".accordion-button\");\r\n\r\n  // Check if opened or closed\r\n  if (toggleAllButton.classList.contains(\"accordion-toggle-btn--closed\")) {\r\n    toggleAllButton.classList.remove(\"accordion-toggle-btn--closed\");\r\n    toggleAllButton.classList.add(\"accordion-toggle-btn--open\");\r\n    toggleAllButton.textContent = \"Close all\";\r\n    accordionButtons.forEach((button) => {\r\n      if (button.matches(\".collapsed\")) button.click();\r\n    });\r\n  } else if (toggleAllButton.classList.contains(\"accordion-toggle-btn--open\")) {\r\n    toggleAllButton.classList.remove(\"accordion-toggle-btn--open\");\r\n    toggleAllButton.classList.add(\"accordion-toggle-btn--closed\");\r\n    toggleAllButton.textContent = \"Open all\";\r\n    accordionButtons.forEach((button) => {\r\n      if (button.matches(\":not(.collapsed)\")) button.click();\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Updates toggle all button if all panels are open/closed individually.\r\n *\r\n * @memberof module:Accordion\r\n *\r\n * @param {Object} event - The event that triggered this function.\r\n * @returns {void}\r\n */\r\nexport function accordionToggleAllButtonState(event) {\r\n  // stop event propagation\r\n  try {\r\n    window.event.cancelBubble = true;\r\n    event.stopPropagation();\r\n  } catch (error) {\r\n    //error message\r\n  }\r\n\r\n  let accordionGroup = event.target.closest(\".accordion-group\"),\r\n    toggleAllButton = accordionGroup.querySelector(\".accordion-toggle-btn\");\r\n\r\n  if (\r\n    toggleAllButton.classList.contains(\"accordion-toggle-btn--closed\") &&\r\n    accordionGroup.querySelectorAll(\".accordion-button.collapsed\").length == 0\r\n  ) {\r\n    toggleAllButton.classList.remove(\"accordion-toggle-btn--closed\");\r\n    toggleAllButton.classList.add(\"accordion-toggle-btn--open\");\r\n    toggleAllButton.textContent = \"Close all\";\r\n  } else if (\r\n    toggleAllButton.classList.contains(\"accordion-toggle-btn--open\") &&\r\n    accordionGroup.querySelectorAll(\".accordion-button.collapsed\").length > 0\r\n  ) {\r\n    toggleAllButton.classList.remove(\"accordion-toggle-btn--open\");\r\n    toggleAllButton.classList.add(\"accordion-toggle-btn--closed\");\r\n    toggleAllButton.textContent = \"Open all\";\r\n  }\r\n}\r\n\r\n/**\r\n * Open and scroll to an accordion panel specified via URL hash.\r\n *\r\n * @memberof module:Accordion\r\n *\r\n * @param {Object} event - (optional) The event that triggered this function.\r\n * @returns {void}\r\n */\r\nexport function accordionHashLinks (event) {\r\n  let urlHash = window.location.hash,\r\n    urlHashId = urlHash.substring(1),\r\n    cleanHash = filterSpecialChar(urlHash);\r\n\r\n  if (cleanHash.length > 0) {\r\n    let targetElement = document.querySelector(`#collapse-${urlHashId}`),\r\n      targetPanelButton = false;\r\n\r\n    // Stop default hash link behaviour if target matches current hash location.\r\n    if (event &&\r\n      ((event.type === 'hashchange' && event.newURL === event.oldURL) ||\r\n      (event.type === 'click' && event.target.hash === urlHash))\r\n    ) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    // ID matching\r\n    if (targetElement && targetElement.closest('.accordion-item')) {\r\n      targetPanelButton = targetElement.closest(\".accordion-item\").querySelector(\".accordion-button\");\r\n    }\r\n    // Title matching\r\n    else {\r\n      let accordionButtons = document.querySelectorAll(\".accordion-button\");\r\n\r\n      if (event && event.type === 'click') {\r\n        cleanHash = filterSpecialChar(event.target.hash);\r\n      }\r\n\r\n      targetPanelButton = Array.from(accordionButtons).find((button) => filterSpecialChar(button.innerText) === cleanHash);\r\n    }\r\n\r\n    if (targetPanelButton){\r\n      if (targetPanelButton.matches(\".collapsed\")) targetPanelButton.click();\r\n\r\n      window.scrollTo(0, targetPanelButton.getBoundingClientRect().top +\r\n      document.documentElement.scrollTop);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * filterSpecialChar\r\n * @param {string} value - value to filter\r\n * @return {undefined}\r\n **/\r\nfunction filterSpecialChar(value) {\r\n  return decodeURI(value.toLowerCase().replace(/[^a-zA-Z0-9/]/g, ''));\r\n}\r\n", "import {\r\n  accordionToggleAll,\r\n  accordionToggleAllButtonState,\r\n  accordionHashLinks,\r\n} from \"./components/bs5/accordion/accordion.functions\";\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", () => {\r\n  (() => {\r\n    let accordionToggleButton = document.querySelectorAll(\".accordion-toggle-btn\");\r\n\r\n    accordionToggleButton.forEach(function (toggleButton) {\r\n      toggleButton.addEventListener(\"click\", accordionToggleAll);\r\n\r\n      let accordionButtons = toggleButton\r\n        .closest(\".accordion-group\")\r\n        .querySelectorAll(\".accordion-button\");\r\n\r\n      accordionButtons.forEach(function (button) {\r\n        button.addEventListener(\"click\", accordionToggleAllButtonState);\r\n      });\r\n    });\r\n\r\n    let inPageLinks = document.querySelectorAll('a[href^=\"#\"]');\r\n\r\n    accordionHashLinks();\r\n    window.onhashchange = accordionHashLinks;\r\n    inPageLinks.forEach(function (link) {\r\n      link.addEventListener(\"click\", accordionHashLinks);\r\n    });\r\n  })();\r\n});\r\n"],
  "mappings": "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",
  "names": ["accordionToggleAll", "event", "error", "toggleAllButton", "accordionButtons", "button", "accordionToggleAllButtonState", "accordionGroup", "accordionHashLinks", "urlHash", "urlHashId", "cleanHash", "filterSpecialChar", "targetElement", "targetPanelButton", "value", "toggleButton", "accordionToggleAll", "button", "accordionToggleAllButtonState", "inPageLinks", "accordionHashLinks", "link"]
}
